/* Generated By:JJTree: Do not edit this line. ASTProgram.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/*EDITED*/

package com.fx702p.parser;

import java.util.Hashtable;

public class ASTProgram extends SimpleNode
{
  public ASTProgram(int id)
  {
    super(id);
  }

  public ASTProgram(Fx702pParser p, int id)
  {
    super(p, id);
  }


  /** Accept the visitor. **/
  @Override
  public Object jjtAccept(Fx702pParserVisitor visitor, Object data)
  {
    return visitor.visit(this, data);
  }

  @Override
  public void jjtClose()
  {
    for (int i = 0, last = jjtGetNumChildren(); i < last; i++)
    {
      Node child = jjtGetChild(i);
      if (child instanceof ASTLine)
      {
        lines.put(((ASTLine)child).getLine(), i);
      }
    }
  }
  public int getLinesCount()
  {
    return jjtGetNumChildren();
  }

  public ASTLine getLine(int aLineIndex)
  {
    return (ASTLine)jjtGetChild(aLineIndex);
  }

  public int getLineIndexByLineNumber(int aLineNumber)
  {
    Integer lineIndex = lines.get(aLineNumber);
    if (lineIndex != null)
    {
      return lineIndex;
    }
    else
    {
      return -1;
    }
  }

  public int getLineIndexByLineNumberAndCheckInstructionIndex(int aLineNumber, int anInstructionIndex)
  {
    int lineIndex = getLineIndexByLineNumber(aLineNumber);

    if (lineIndex >= 0)
    {
      ASTLine line = getLine(lineIndex);
      if (line != null && anInstructionIndex >= 0 && anInstructionIndex < line.jjtGetNumChildren())
      {
        return lineIndex;
      }
    }

    return -1;
  }

  protected Hashtable<Integer, Integer> lines = new Hashtable<Integer, Integer>();
}
/*
 * JavaCC - OriginalChecksum=c9f19707900484bd4e4744369e75d8d1 (do not edit this line)
 */
